// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NegoSudApi.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NegoSudApi.Migrations
{
    [DbContext(typeof(NegoSudDbContext))]
    [Migration("20230130104001_AddOrdersTables")]
    partial class AddOrdersTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NegoSudApi.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 55, DateTimeKind.Utc).AddTicks(8792))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("FirstLine")
                        .HasColumnType("text")
                        .HasColumnName("first_line");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 55, DateTimeKind.Utc).AddTicks(9219))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_address_city_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_address_user_id");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Bottle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AlcoholPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("alcohol_percentage");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 52, DateTimeKind.Utc).AddTicks(3052))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("current_price");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Picture")
                        .HasColumnType("text")
                        .HasColumnName("picture");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("integer")
                        .HasColumnName("producer_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 52, DateTimeKind.Utc).AddTicks(3394))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.Property<int?>("WineLabelId")
                        .HasColumnType("integer")
                        .HasColumnName("wine_label_id");

                    b.Property<string>("WineType")
                        .HasColumnType("text")
                        .HasColumnName("wine_type");

                    b.Property<int?>("YearProduced")
                        .HasColumnType("integer")
                        .HasColumnName("year_produced");

                    b.HasKey("Id")
                        .HasName("pk_bottle");

                    b.HasIndex("ProducerId")
                        .HasDatabaseName("ix_bottle_producer_id");

                    b.HasIndex("WineLabelId")
                        .HasDatabaseName("ix_bottle_wine_label_id");

                    b.HasIndex("WineType")
                        .HasDatabaseName("ix_bottle_wine_type");

                    b.ToTable("Bottle", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.BottleGrape", b =>
                {
                    b.Property<int>("BottleId")
                        .HasColumnType("integer")
                        .HasColumnName("bottle_id");

                    b.Property<int>("GrapeId")
                        .HasColumnType("integer")
                        .HasColumnName("grape_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 52, DateTimeKind.Utc).AddTicks(7721))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("GrapePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("grape_percentage");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 52, DateTimeKind.Utc).AddTicks(7999))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("BottleId", "GrapeId")
                        .HasName("pk_bottle_grape");

                    b.HasIndex("GrapeId")
                        .HasDatabaseName("ix_bottle_grape_grape_id");

                    b.ToTable("BottleGrape", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.BottleStorageLocation", b =>
                {
                    b.Property<int>("BottleId")
                        .HasColumnType("integer")
                        .HasColumnName("bottle_id");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("storage_location_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 56, DateTimeKind.Utc).AddTicks(2266))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 56, DateTimeKind.Utc).AddTicks(2551))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("BottleId", "StorageLocationId")
                        .HasName("pk_bottle_storage_location");

                    b.HasIndex("StorageLocationId")
                        .HasDatabaseName("ix_bottle_storage_location_storage_location_id");

                    b.ToTable("BottleStorageLocation", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 55, DateTimeKind.Utc).AddTicks(4116))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 55, DateTimeKind.Utc).AddTicks(4371))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("integer")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 53, DateTimeKind.Utc).AddTicks(3800))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 53, DateTimeKind.Utc).AddTicks(4061))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Full_Name")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("text")
                        .HasColumnName("cancelled_by");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 56, DateTimeKind.Utc).AddTicks(8250))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("Date_Delivery")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_delivery");

                    b.Property<DateTime?>("Date_Order")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_order");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 56, DateTimeKind.Utc).AddTicks(8544))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_customer_order");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_order_customer_id");

                    b.ToTable("CustomerOrder", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.CustomerOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BottleId")
                        .HasColumnType("integer")
                        .HasColumnName("bottle_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 57, DateTimeKind.Utc).AddTicks(1192))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<int?>("CustomerOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_order_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 57, DateTimeKind.Utc).AddTicks(1571))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_customer_order_line");

                    b.HasIndex("BottleId")
                        .HasDatabaseName("ix_customer_order_line_bottle_id");

                    b.HasIndex("CustomerOrderId")
                        .HasDatabaseName("ix_customer_order_line_customer_order_id");

                    b.ToTable("CustomerOrderLine", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Grape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 53, DateTimeKind.Utc).AddTicks(8212))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("GrapeType")
                        .HasColumnType("text")
                        .HasColumnName("grape_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 53, DateTimeKind.Utc).AddTicks(8462))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.Property<string>("WineType")
                        .HasColumnType("text")
                        .HasColumnName("wine_type");

                    b.HasKey("Id")
                        .HasName("pk_grape");

                    b.ToTable("Grape", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 58, DateTimeKind.Utc).AddTicks(8276))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 58, DateTimeKind.Utc).AddTicks(8500))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 54, DateTimeKind.Utc).AddTicks(4841))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 54, DateTimeKind.Utc).AddTicks(5130))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_producer");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_producer_address_id");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_producer_region_id");

                    b.ToTable("Producer", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 54, DateTimeKind.Utc).AddTicks(9556))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 54, DateTimeKind.Utc).AddTicks(9841))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_region");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_region_country_id");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 58, DateTimeKind.Utc).AddTicks(3791))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 58, DateTimeKind.Utc).AddTicks(4861))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 54, DateTimeKind.Utc).AddTicks(1403))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 54, DateTimeKind.Utc).AddTicks(1695))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_storage_location");

                    b.ToTable("StorageLocation", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.SupplierOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("text")
                        .HasColumnName("cancelled_by");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 57, DateTimeKind.Utc).AddTicks(3025))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DateDelivery")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_delivery");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_order");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("integer")
                        .HasColumnName("producer_id");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 57, DateTimeKind.Utc).AddTicks(3307))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_supplier_order");

                    b.HasIndex("ProducerId")
                        .HasDatabaseName("ix_supplier_order_producer_id");

                    b.ToTable("SupplierOrder", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.SupplierOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BottleId")
                        .HasColumnType("integer")
                        .HasColumnName("bottle_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 57, DateTimeKind.Utc).AddTicks(5954))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<int?>("SupplierOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 57, DateTimeKind.Utc).AddTicks(6288))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_supplier_order_line");

                    b.HasIndex("BottleId")
                        .HasDatabaseName("ix_supplier_order_line_bottle_id");

                    b.HasIndex("SupplierOrderId")
                        .HasDatabaseName("ix_supplier_order_line_supplier_order_id");

                    b.ToTable("SupplierOrderLine", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 57, DateTimeKind.Utc).AddTicks(9896))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 58, DateTimeKind.Utc).AddTicks(143))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.WineLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 52, DateTimeKind.Utc).AddTicks(6759))
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 30, 10, 40, 1, 52, DateTimeKind.Utc).AddTicks(6983))
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_wine_label");

                    b.ToTable("WineLabel", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Address", b =>
                {
                    b.HasOne("NegoSudApi.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_address_city_city_id");

                    b.HasOne("NegoSudApi.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_address_users_user_id");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NegoSudApi.Models.Bottle", b =>
                {
                    b.HasOne("NegoSudApi.Models.Producer", "Producer")
                        .WithMany("Bottles")
                        .HasForeignKey("ProducerId")
                        .HasConstraintName("fk_bottle_producers_producer_id");

                    b.HasOne("NegoSudApi.Models.WineLabel", "WineLabel")
                        .WithMany("Bottles")
                        .HasForeignKey("WineLabelId")
                        .HasConstraintName("fk_bottle_wine_labels_wine_label_id");

                    b.Navigation("Producer");

                    b.Navigation("WineLabel");
                });

            modelBuilder.Entity("NegoSudApi.Models.BottleGrape", b =>
                {
                    b.HasOne("NegoSudApi.Models.Bottle", "Bottle")
                        .WithMany("BottleGrapes")
                        .HasForeignKey("BottleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bottle_grape_bottle_bottle_id");

                    b.HasOne("NegoSudApi.Models.Grape", "Grape")
                        .WithMany("BottleGrapes")
                        .HasForeignKey("GrapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bottle_grape_grapes_grape_id");

                    b.Navigation("Bottle");

                    b.Navigation("Grape");
                });

            modelBuilder.Entity("NegoSudApi.Models.BottleStorageLocation", b =>
                {
                    b.HasOne("NegoSudApi.Models.Bottle", "Bottle")
                        .WithMany("BottleStorageLocations")
                        .HasForeignKey("BottleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bottle_storage_location_bottle_bottle_id");

                    b.HasOne("NegoSudApi.Models.StorageLocation", "StorageLocation")
                        .WithMany("BottleStorageLocations")
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bottle_storage_location_storage_location_storage_location_id");

                    b.Navigation("Bottle");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("NegoSudApi.Models.CustomerOrder", b =>
                {
                    b.HasOne("NegoSudApi.Models.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_customer_order_customer_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NegoSudApi.Models.CustomerOrderLine", b =>
                {
                    b.HasOne("NegoSudApi.Models.Bottle", "Bottle")
                        .WithMany()
                        .HasForeignKey("BottleId")
                        .HasConstraintName("fk_customer_order_line_bottle_bottle_id");

                    b.HasOne("NegoSudApi.Models.CustomerOrder", "CustomerOrder")
                        .WithMany("Lines")
                        .HasForeignKey("CustomerOrderId")
                        .HasConstraintName("fk_customer_order_line_customer_order_customer_order_id");

                    b.Navigation("Bottle");

                    b.Navigation("CustomerOrder");
                });

            modelBuilder.Entity("NegoSudApi.Models.Producer", b =>
                {
                    b.HasOne("NegoSudApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_producer_addresses_address_id");

                    b.HasOne("NegoSudApi.Models.Region", "Region")
                        .WithMany("Producers")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_producer_regions_region_id");

                    b.Navigation("Address");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("NegoSudApi.Models.Region", b =>
                {
                    b.HasOne("NegoSudApi.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_region_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NegoSudApi.Models.Role", b =>
                {
                    b.HasOne("NegoSudApi.Models.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("fk_role_permissions_permission_id");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("NegoSudApi.Models.SupplierOrder", b =>
                {
                    b.HasOne("NegoSudApi.Models.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .HasConstraintName("fk_supplier_order_producer_producer_id");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("NegoSudApi.Models.SupplierOrderLine", b =>
                {
                    b.HasOne("NegoSudApi.Models.Bottle", "Bottle")
                        .WithMany()
                        .HasForeignKey("BottleId")
                        .HasConstraintName("fk_supplier_order_line_bottle_bottle_id");

                    b.HasOne("NegoSudApi.Models.SupplierOrder", "SupplierOrder")
                        .WithMany("Lines")
                        .HasForeignKey("SupplierOrderId")
                        .HasConstraintName("fk_supplier_order_line_supplier_order_supplier_order_id");

                    b.Navigation("Bottle");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("NegoSudApi.Models.Bottle", b =>
                {
                    b.Navigation("BottleGrapes");

                    b.Navigation("BottleStorageLocations");
                });

            modelBuilder.Entity("NegoSudApi.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("NegoSudApi.Models.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("NegoSudApi.Models.Customer", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("NegoSudApi.Models.CustomerOrder", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("NegoSudApi.Models.Grape", b =>
                {
                    b.Navigation("BottleGrapes");
                });

            modelBuilder.Entity("NegoSudApi.Models.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("NegoSudApi.Models.Producer", b =>
                {
                    b.Navigation("Bottles");
                });

            modelBuilder.Entity("NegoSudApi.Models.Region", b =>
                {
                    b.Navigation("Producers");
                });

            modelBuilder.Entity("NegoSudApi.Models.StorageLocation", b =>
                {
                    b.Navigation("BottleStorageLocations");
                });

            modelBuilder.Entity("NegoSudApi.Models.SupplierOrder", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("NegoSudApi.Models.User", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("NegoSudApi.Models.WineLabel", b =>
                {
                    b.Navigation("Bottles");
                });
#pragma warning restore 612, 618
        }
    }
}
