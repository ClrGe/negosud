// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NegoSudApi.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NegoSudApi.Migrations
{
    [DbContext(typeof(NegoSudDbContext))]
    [Migration("20230112145606_InitialTable")]
    partial class InitialTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Bottle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Alcohol_Percentage")
                        .HasColumnType("numeric")
                        .HasColumnName("alcohol_percentage");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Created_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("Current_Price")
                        .HasColumnType("numeric")
                        .HasColumnName("current_price");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Full_Name")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea")
                        .HasColumnName("picture");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("integer")
                        .HasColumnName("producer_id");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Updated_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.Property<int?>("Year_Produced")
                        .HasColumnType("integer")
                        .HasColumnName("year_produced");

                    b.HasKey("Id")
                        .HasName("pk_bottle");

                    b.HasIndex("ProducerId")
                        .HasDatabaseName("ix_bottle_producer_id");

                    b.ToTable("Bottle", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.BottleGrape", b =>
                {
                    b.Property<int>("Bottle_Id")
                        .HasColumnType("integer")
                        .HasColumnName("bottle_id");

                    b.Property<int>("Grape_Id")
                        .HasColumnType("integer")
                        .HasColumnName("grape_id");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Created_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<int?>("Grape_Percentage")
                        .HasColumnType("integer")
                        .HasColumnName("grape_percentage");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Updated_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Bottle_Id", "Grape_Id")
                        .HasName("pk_bottle_grape");

                    b.HasIndex("Grape_Id")
                        .HasDatabaseName("ix_bottle_grape_grape_id");

                    b.ToTable("BottleGrape", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.BottleLocation", b =>
                {
                    b.Property<int>("Bottle_Id")
                        .HasColumnType("integer")
                        .HasColumnName("bottle_id");

                    b.Property<int>("Location_Id")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Created_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Updated_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Bottle_Id", "Location_Id")
                        .HasName("pk_bottle_location");

                    b.HasIndex("Location_Id")
                        .HasDatabaseName("ix_bottle_location_location_id");

                    b.ToTable("BottleLocation", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Created_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Updated_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Grape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Created_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Grape_Type")
                        .HasColumnType("text")
                        .HasColumnName("grape_type");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Updated_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Wine_Type")
                        .HasColumnType("text")
                        .HasColumnName("wine_type");

                    b.HasKey("Id")
                        .HasName("pk_grape");

                    b.ToTable("Grape", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Created_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Updated_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_location");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Created_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Updated_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_producer");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_producer_region_id");

                    b.ToTable("Producer", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Created_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnUpdate()
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Updated_By")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_region");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_region_country_id");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("NegoSudApi.Models.Bottle", b =>
                {
                    b.HasOne("NegoSudApi.Models.Producer", "Producer")
                        .WithMany("Bottles")
                        .HasForeignKey("ProducerId")
                        .HasConstraintName("fk_bottle_producers_producer_id");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("NegoSudApi.Models.BottleGrape", b =>
                {
                    b.HasOne("NegoSudApi.Models.Bottle", "Bottle")
                        .WithMany("BottleGrapes")
                        .HasForeignKey("Bottle_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bottle_grape_bottle_bottle_id");

                    b.HasOne("NegoSudApi.Models.Grape", "Grape")
                        .WithMany("BottleGrapes")
                        .HasForeignKey("Grape_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bottle_grape_grapes_grape_id");

                    b.Navigation("Bottle");

                    b.Navigation("Grape");
                });

            modelBuilder.Entity("NegoSudApi.Models.BottleLocation", b =>
                {
                    b.HasOne("NegoSudApi.Models.Bottle", "Bottle")
                        .WithMany("BottleLocations")
                        .HasForeignKey("Bottle_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bottle_location_bottle_bottle_id");

                    b.HasOne("NegoSudApi.Models.Location", "Location")
                        .WithMany("BottleLocations")
                        .HasForeignKey("Location_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bottle_location_location_location_id");

                    b.Navigation("Bottle");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("NegoSudApi.Models.Producer", b =>
                {
                    b.HasOne("NegoSudApi.Models.Region", "Region")
                        .WithMany("Producers")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_producer_regions_region_id");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("NegoSudApi.Models.Region", b =>
                {
                    b.HasOne("NegoSudApi.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_region_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NegoSudApi.Models.Bottle", b =>
                {
                    b.Navigation("BottleGrapes");

                    b.Navigation("BottleLocations");
                });

            modelBuilder.Entity("NegoSudApi.Models.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("NegoSudApi.Models.Grape", b =>
                {
                    b.Navigation("BottleGrapes");
                });

            modelBuilder.Entity("NegoSudApi.Models.Location", b =>
                {
                    b.Navigation("BottleLocations");
                });

            modelBuilder.Entity("NegoSudApi.Models.Producer", b =>
                {
                    b.Navigation("Bottles");
                });

            modelBuilder.Entity("NegoSudApi.Models.Region", b =>
                {
                    b.Navigation("Producers");
                });
#pragma warning restore 612, 618
        }
    }
}
